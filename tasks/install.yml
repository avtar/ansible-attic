---
- name: Install | Ensure required packages are installed
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - gnupg2
    - tar
    
- name: Install | Download Attic tar archive
  get_url:
    url: "{{ attic_download_url }}"
    dest: "/tmp/{{ attic_tar_archive }}"

- name: Install | Download Attic tar archive signature
  get_url:
    url: "{{ attic_download_url }}.asc"
    dest: "/tmp/{{ attic_tar_archive }}.asc"

# Ignore errors so that the next play will download the missing key
- name: Install | Check to see if the signing key is installed
  command: "gpg --list-keys {{ attic_signing_key }}"
  register: gpg_key_result
  ignore_errors: True
  
- name: Install | Download and install the key if required
  command: "gpg --keyserver {{ attic_pgp_key_server }} --recv-key {{ attic_signing_key }}"
  when: gpg_key_result|failed

# Ignore errors so that we can fail with a more meaningful message in the next play
- name: Install | Verify tar archive signature
  command: "gpg /tmp/{{ attic_tar_archive }}.asc"
  register: gpg_sig_result
  ignore_errors: True

- name: Install | Stop if signature check failed
  fail:
    msg: "Signature check of downloaded tar archive failed"
  when: gpg_sig_result.stdout.find('Good signature') != -1
  
- name: Install | Extract downloaded tar archive
  unarchive:
    src: "/tmp/{{ attic_tar_archive }}"
    dest: "{{ attic_install_dir }}"
    copy: no

- name: Install | Create a symlink pointing to attic binary in the extracted directory
  file:
    src: "/opt/Attic-{{ attic_version }}-linux-x86_64/attic"
    dest: "{{ attic_executable }}"
    state: link

- name: Install | Remove existing local repository directory
  file:
    path: "{{ attic_local_repository }}"
    state: absent
  when: overwrite_repository

- name: Install | Verify if local repository has already been initialized
  stat:
    path: "{{ attic_local_repository }}/README"
  register: localrepo

- debug:
    var: localrepo

- name: Install | Initialize local repository
  command: "{{ attic_executable }} init -e passphrase {{ attic_local_repository }}"
  environment:
    ATTIC_PASSPHRASE: "{{ attic_repository_passphrase }}"
  when: not localrepo.stat.exists 

